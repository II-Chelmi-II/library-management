openapi: 3.0.3
info:
  title: Library API
  version: 2.0.0
  description: STD22001
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Book"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - "Book"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: '#/components/responses/Response200'
  /books/import:
    post:
      tags:
        - "Book"
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportBook'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Book"
      description: Associate a single book to an author
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
  /books/authors:
    put:
      tags:
        - "Book"
      summary: Update Book authors
      description: Update the authors of multiple books
      requestBody: 
        required: true
        content:
            application/json:
              schema: 
               type: array
               items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          $ref: '#/components/responses/Response200'
  /authors:
    get:
      tags:
        - "Author"
      summary: Get authors
      description: The returned authors filtered by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - "Author"
      summary: Update authors
      description: Update the list of authors
      operationId: updateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
    delete:
      tags:
        - "Author"
      summary: Delete authors
      description: Delete authors from the list
      operationId: deleteAuthors
      responses:
        204:
          description: Authors deleted successfully
  /authors/import:
    post:
      tags:
        - "Author"
      summary: Import authors
      description: Import authors from Excel or JSON file.
      operationId: importAuthors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /loans:
    post:
      tags:
        - "Loans"
      summary: Borrow a book
      description: Record a book loan by a visitor
      requestBody:
        description: Loan details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Loan"
      responses:
        200:
          $ref: "#/components/responses/Response200"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
    put:
      tags:
        - "Loans"
      summary: Return a book
      description: Record the return of a borrowed book by a visitor
      requestBody:
        description: Return details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Loan"
      responses:
        200:
          $ref: "#/components/responses/Response200"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
  /books/borrow:
    post:
      tags:
        - "Book"
      summary: Borrow a book
      operationId: borrowBook
      security:
        - oAuthLibrary: [borrow]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: Book borrowed successfully
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /books/return:
    post:
      tags:
        - "Book"
      summary: Return a book
      operationId: returnBook
      security:
        - oAuthLibrary: [return]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: Book returned successfully
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /books/borrowed:
    get:
      tags:
        - "Books"
      summary: Get borrowed books
      description: Get the list of books currently borrowed
      responses:
        200:
          description: The list of borrowed books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
  /authors/add:
    post:
      tags:
        - "Author"
      summary: Add an author
      operationId: addAuthor
      security:
        - oAuthLibrary: [add_author]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: Author added successfully
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /books/add:
    post:
      tags:
        - "Book"
      summary: Add a book
      operationId: addBook
      security:
        - oAuthLibrary: [add_book]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: Book added successfully
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /books/available:
    get:
      tags:
        - "Books"
      summary: Get available books
      description: Get the list of books currently available for borrowing
      responses:
        200:
          description: The list of available books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
  /visitors/{visitorId}/activities:
    get:
      tags:
        - "Visitors"
      summary: Get visitor activities
      description: Get the list of activities performed by a visitor within a specified period
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date of the period
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date of the period
          required: true
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: The list of visitor activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VisitorActivity"
        400:
          $ref: "#/components/responses/Response400"
        403:
          $ref: "#/components/responses/Response403"
        500:
          $ref: "#/components/responses/Response500"
components:
  securitySchemes:
    oAuthLibrary:
      type: oauth2
      description: Cette API utilise OAuth 2.0 pour gérer les autorisations.
      flows:
        implicit:
          authorizationUrl: https://api.library.com/oauth2/authorize
          scopes:
            borrow: borrowing books
            return: returning books
            add_author: adding authors
            add_book: adding books
  schemas:
    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Book:
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
      properties:
        author:
          $ref: '#/components/schemas/Author'
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    UpdateBookAuthor:
      type: object
      properties:
        bookID:
          type: integer
        authorID:
          type: integer
    ImportBookJSON:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
      required:
        - bookName
        - author
        - pageNumbers
        - topic
        - releaseDate
    ImportBookExcel:
      type: object
      properties:
        file: # Assuming 'file' is the field name for the uploaded Excel file
          type: string
          format: binary
      required:
        - file
    ImportBook:
      oneOf:
        - $ref: '#/components/schemas/ImportBookJSON'
        - $ref: '#/components/schemas/ImportBookExcel'
    ImportAuthorJSON:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
      required:
        - authorName
        - sex
    ImportAuthorExcel:
      type: object
      properties:
        file: # Assuming 'file' is the field name for the uploaded Excel file
          type: string
          format: binary
      required:
        - file
    ImportAuthor:
      oneOf:
        - $ref: '#/components/schemas/ImportAuthorJSON'
        - $ref: '#/components/schemas/ImportAuthorExcel'
    defaultResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
        body: {}
    Visitor:
      type: object
      properties:
        visitorId:
          type: string
        name:
          type: string
        reference:
          type: string
        activities:
          type: array
          items:
            type: object
            properties:
              activityType:
                type: string
                enum:
                  - BORROW
                  - RETURN
              bookId:
                type: string
              date:
                type: string
                format: date-time
    VisitorActivity:
      type: object
      properties:
        activityType:
          type: string
          enum:
            - BORROW
            - RETURN
        bookId:
          type: string
        date:
          type: string
          format: date-time
    Loan:
      type: object
      properties:
        loanId:
          type: string
        bookId:
          type: string
        loanDate:
          type: string
          format: date-time
  responses:
    Response200:
      description: HTTP 200 (OK)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 200
              message: OK
    Response400:
      description: HTTP 400 (Bad Request)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 400
              message: Bad Request
    Response403:
      description: HTTP 403 (Forbidden)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 403
              message: Forbidden
    Response500:
      description: HTTP 500 (Internal Server Error)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/defaultResponse"
          example:
            status:
              code: 500
              message: Internal Server Error'
  parameters:
    Page: 
      in: query
      name: page
      schema:
        type: integer
        default: 1
      required: false
    PageSize:
      in: query
      name: pageSize
      schema:
        type: integer
        default: 50
      required: false