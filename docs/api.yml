openapi: 3.0.3
info:
  title: Library API
  version: 2.0.0
  description: STD22001
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Book"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
    put:
      tags:
        - "Book"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: '#/components/responses/Response200'
  /books/import:
    post:
      tags:
        - "Book"
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportBook'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Book"
      description: Associate a single book to an author
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/Response200'
  /books/authors:
    put:
      tags:
        - "Book"
      summary: Update Book authors
      description: Update the authors of multiple books
      requestBody: 
        required: true
        content:
            application/json:
              schema: 
               type: array
               items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          $ref: '#/components/responses/Response200'
  /authors:
    get:
      tags:
        - "Author"
      summary: Get authors
      description: The returned authors filtered by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/queryPagination'
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - "Author"
      summary: Update authors
      description: Update the list of authors
      operationId: updateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
    delete:
      tags:
        - "Author"
      summary: Delete authors
      description: Delete authors from the list
      operationId: deleteAuthors
      responses:
        204:
          description: Authors deleted successfully
  /authors/import:
    post:
      tags:
        - "Author"
      summary: Import authors
      description: Import authors from Excel or JSON file.
      operationId: importAuthors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          $ref: '#/components/responses/Response200'
        400:
          $ref: '#/components/responses/Response400'
        403:
          $ref: '#/components/responses/Response403'
        500:
          $ref: '#/components/responses/Response500'
components:
  schemas:
    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Book:
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
      properties:
        author:
          $ref: '#/components/schemas/Author'
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    UpdateBookAuthor:
      type: object
      properties:
        bookID:
          type: integer
        authorID:
          type: integer
    ImportBookJSON:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
      required:
        - bookName
        - author
        - pageNumbers
        - topic
        - releaseDate

    ImportBookExcel:
      type: object
      properties:
        file: # Assuming 'file' is the field name for the uploaded Excel file
          type: string
          format: binary
      required:
        - file

    ImportBook:
      oneOf:
        - $ref: '#/components/schemas/ImportBookJSON'
        - $ref: '#/components/schemas/ImportBookExcel'
  
    ImportAuthorJSON:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
      required:
        - authorName
        - sex

    ImportAuthorExcel:
      type: object
      properties:
        file: # Assuming 'file' is the field name for the uploaded Excel file
          type: string
          format: binary
      required:
        - file

    ImportAuthor:
      oneOf:
        - $ref: '#/components/schemas/ImportAuthorJSON'
        - $ref: '#/components/schemas/ImportAuthorExcel'
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
    pathPagination:
      name: page
      in: path
      description: Page number for pagination
      required: true
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 50
          pageSize:
            type: integer
            default: 1
  responses:
    defaultResponse:
      description: Default response structure
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
              body:
                type: object
    Response200:
      $ref: '#/components/responses/defaultResponse'
      description: OK
    Response400:
      $ref: '#/components/responses/defaultResponse'
      description: Bad Request
    Response403:
      $ref: '#/components/responses/defaultResponse'
      description: Forbidden
    Response500:
      $ref: '#/components/responses/defaultResponse'
      description: Internal Server Error