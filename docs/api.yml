openapi: 3.0.3
info:
  title: Library API
  version: 2.0.0
  description: STD22001
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Book"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - "Book"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Book"
      description: Associate a single book to an author
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: The updated book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      summary: Update Book authors
      description: Update the authors of multiple books
      requestBody: 
        required: true
        content:
            application/json:
              schema: 
               type: array
               items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        '200': 
          description: Authors updated successfully
  /authors:
    get:
      tags:
        - "Author"
      summary: Get authors
      description: The returned authors filtered by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags:
        - "Author"
      summary: Update authors
      description: Update the list of authors
      operationId: updateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
        - "Author"
      summary: Delete authors
      description: Delete authors from the list
      operationId: deleteAuthors
      responses:
        204:
          description: Authors deleted successfully
components:
  schemas:
    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Book:
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
      properties:
        author:
          $ref: '#/components/schemas/Author'
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    UpdateBookAuthor:
      type: object
      properties:
        bookID:
          type: integer
        authorID:
          type: integer
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1
    pathPagination:
      name: page
      in: path
      description: Page number for pagination
      required: true
      schema:
        type: integer
        default: 1

# 4-a Oui, on peut gérer la pagination à travers les entêtes de la requête 
# mais cette action n'est pas conseiller pour améliorer l'expérience l'utilisateur. 

# 4-b Utiliser les entêtes de requête pour la pagination n'est pas 
# nécessaire car les paramètres de requête sont plus simples et efficaces. 
# Les entêtes sont utiles dans des cas spécifiques mais peuvent 
# compliquer l'expérience utilisateur. Il est préférable d'utilser les paramètres de requête pour la pagination.